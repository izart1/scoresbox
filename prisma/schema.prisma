generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String   @unique
  password String
  name     String?  @default("NoName")
  picture  String?  @default("/uploads/user.png")
  role     UserRole @default(USER)

  favoriteTeams   FavoriteTeam[]
  favoriteLeagues FavoriteLeague[]

  @@map("user")
}

model FavoriteTeam {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @map("user_id")
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)
  teamId String @map("team_id")

  @@unique([userId, teamId])
  @@map("favorite_team")
}

model FavoriteLeague {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")

  user     User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String @map("user_id")
  league   League @relation(fields: [leagueId], references: [id], onDelete: Cascade)
  leagueId String @map("league_id")

  @@unique([userId, leagueId])
  @@map("favorite_league")
}

model Team {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name       String
  city       String
  country    String
  code       String
  founded    Int
  isNational Boolean @map("is_national")
  logo       String?

  fixtureHome      Fixture[]          @relation("HomeFixtures")
  fixtureAway      Fixture[]          @relation("AwayFixtures")
  matchEvents      MatchEvent[]
  playerStatistics PlayerStatistics[]
  teamStatistics   TeamStatistics[]
  teamTrophies     TeamTrophy[]

  favoriteTeams FavoriteTeam[]

  @@map("team")
}

model League {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name    String
  type    LeagueType
  logo    String
  round   String
  country String
  season  Int

  fixtures         Fixture[]
  playerStatistics PlayerStatistics[]
  teamStatistics   TeamStatistics[]

  favoriteLeagues FavoriteLeague[]

  @@map("league")
}

model Fixture {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  timezone   String
  date       DateTime
  timestamp  Int
  firstHalf  Int      @map("first_half")
  secondHalf Int      @map("second_half")
  result     Result?

  referee     Staff?         @relation(fields: [refereeId], references: [id])
  refereeId   String?        @map("referee_id")
  status      FixtureStatus? @relation(fields: [statusId], references: [id])
  statusId    String?        @map("status_id")
  league      League         @relation(fields: [leagueId], references: [id])
  leagueId    String         @map("league_id")
  homeTeam    Team           @relation("HomeFixtures", fields: [homeTeamId], references: [id])
  homeTeamId  String         @map("home_team_id")
  awayTeam    Team           @relation("AwayFixtures", fields: [awayTeamId], references: [id])
  awayTeamId  String         @map("away_team_id")
  matchEvents MatchEvent[]

  homeTeamScore      Int? @map("home_team_score")
  awayTeamScore      Int? @map("away_team_score")
  halftimeHomeScore  Int? @map("halftime_home_score")
  halftimeAwayScore  Int? @map("halftime_away_score")
  extraTimeHomeScore Int? @map("extra_time_home_score")
  extraTimeAwayScore Int? @map("extra_time_away_score")
  penaltyHomeScore   Int? @map("penalty_home_score")
  penaltyAwayScore   Int? @map("penalty_away_score")

  @@index([date, leagueId])
  @@map("fixture")
}

model Player {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name           String
  firstName      String   @map("first_name")
  lastName       String   @map("last_name")
  dateOfBirth    DateTime @map("date_of_birth")
  countryOfBirth String   @map("country_of_birth")
  nationality    String
  position       String
  height         String?
  weight         String?
  photo          String?

  playerTrophies          PlayerTrophy[]
  matchEventsAsGoalScorer MatchEvent[]       @relation("PlayerGoalScorer")
  matchEventsAsAssist     MatchEvent[]       @relation("PlayerAssist")
  PlayerStatistics        PlayerStatistics[]

  @@map("player")
}

model Season {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  year      Int
  start     DateTime
  end       DateTime
  isCurrent Boolean  @map("is_current")

  teamTrophy   TeamTrophy[]
  playerTrophy PlayerTrophy[]

  @@map("season")
}

model Country {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String
  code String
  flag String?

  @@map("country")
}

model Venue {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name    String
  address String
  city    String
  country String
  surface Surface? // Используем enum Surface
  image   String?

  @@map("venue")
}

model Staff {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name           String
  firstName      String   @map("first_name")
  lastName       String   @map("last_name")
  dateOfBirth    DateTime @map("date_of_birth")
  countryOfBirth String   @map("country_of_birth")
  photo          String?
  role           Role

  fixtures Fixture[]

  @@map("staff")
}

model MatchEvent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  type      EventType @map("event_type")
  goalType  GoalType? @map("goal_type")
  cardType  CardType? @map("card_type")
  comments  String?   @map("comments")
  time      Int       @map("time")
  timeExtra Int?      @map("time_extra")

  fixture      Fixture @relation(fields: [fixtureId], references: [id])
  fixtureId    String  @map("fixture_id")
  team         Team    @relation(fields: [teamId], references: [id])
  teamId       String  @map("team_id")
  goalScorer   Player  @relation("PlayerGoalScorer", fields: [goalScorerId], references: [id])
  goalScorerId String  @map("player_goal_id")
  assist       Player? @relation("PlayerAssist", fields: [assistId], references: [id])
  assistId     String? @map("player_assist_id")

  @@map("match_event")
}

model PlayerStatistics {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  season Int @map("season")

  // Игровая статистика
  appearances Int     @default(0) @map("appearances")
  position    String? @map("position")

  // Статистика атаки
  goals      Int @default(0) @map("goals")
  assists    Int @default(0) @map("assists")
  cleanSheet Int @default(0) @map("clean_sheet")

  // Дисциплинарная статистика
  yellowCards Int @default(0) @map("yellow_cards")
  redCards    Int @default(0) @map("red_cards")

  // Статистика пенальти
  penaltiesWon    Int @default(0) @map("penalties_won")
  penaltiesScored Int @default(0) @map("penalties_scored")
  penaltiesMissed Int @default(0) @map("penalties_missed")

  // Связи с другими моделями
  player   Player @relation(fields: [playerId], references: [id])
  playerId String @map("player_id")
  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String @map("team_id")
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String @map("league_id")

  @@unique([playerId, teamId, leagueId, season])
  @@index([teamId, leagueId, season])
  @@map("player_statistics")
}

model TeamStatistics {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String @map("team_id")
  league   League @relation(fields: [leagueId], references: [id])
  leagueId String @map("league_id")

  season Int     @map("season")
  form   String? @map("form")

  // Fixtures
  fixturesTotal Int? @map("fixtures_total")
  fixturesHome  Int? @map("fixtures_home")
  fixturesAway  Int? @map("fixtures_away")

  // Wins
  winsTotal Int? @map("wins_total")
  winsHome  Int? @map("wins_home")
  winsAway  Int? @map("wins_away")

  // Draws
  drawsTotal Int? @map("draws_total")
  drawsHome  Int? @map("draws_home")
  drawsAway  Int? @map("draws_away")

  // Losses
  lossesTotal Int? @map("losses_total")
  lossesHome  Int? @map("losses_home")
  lossesAway  Int? @map("losses_away")

  // Goals For
  goalsForTotal    Int?   @map("goals_for_total")
  goalsForHome     Int?   @map("goals_for_home")
  goalsForAway     Int?   @map("goals_for_away")
  goalsForAvgTotal Float? @map("goals_for_avg_total")
  goalsForAvgHome  Float? @map("goals_for_avg_home")
  goalsForAvgAway  Float? @map("goals_for_avg_away")

  // Goals Against
  goalsAgainstTotal    Int?   @map("goals_against_total")
  goalsAgainstHome     Int?   @map("goals_against_home")
  goalsAgainstAway     Int?   @map("goals_against_away")
  goalsAgainstAvgTotal Float? @map("goals_against_avg_total")
  goalsAgainstAvgHome  Float? @map("goals_against_avg_home")
  goalsAgainstAvgAway  Float? @map("goals_against_avg_away")

  // Streaks
  maxWinStreak  Int? @map("max_win_streak")
  maxDrawStreak Int? @map("max_draw_streak")
  maxLoseStreak Int? @map("max_lose_streak")

  // Biggest Wins
  biggestWinHome String? @map("biggest_win_home")
  biggestWinAway String? @map("biggest_win_away")

  // Biggest Losses
  biggestLossHome String? @map("biggest_loss_home")
  biggestLossAway String? @map("biggest_loss_away")

  // Goals in Biggest Matches
  maxGoalsForHome     Int? @map("max_goals_for_home")
  maxGoalsForAway     Int? @map("max_goals_for_away")
  maxGoalsAgainstHome Int? @map("max_goals_against_home")
  maxGoalsAgainstAway Int? @map("max_goals_against_away")

  // Clean Sheets
  cleanSheetsTotal Int? @map("clean_sheets_total")
  cleanSheetsHome  Int? @map("clean_sheets_home")
  cleanSheetsAway  Int? @map("clean_sheets_away")

  // Failed to Score
  failedToScoreTotal Int? @map("failed_to_score_total")
  failedToScoreHome  Int? @map("failed_to_score_home")
  failedToScoreAway  Int? @map("failed_to_score_away")

  @@map("team_statistics")
}

model TeamTrophy {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  team     Team   @relation(fields: [teamId], references: [id])
  teamId   String
  trophy   Trophy @relation(fields: [trophyId], references: [id])
  trophyId String
  season   Season @relation(fields: [seasonId], references: [id])
  seasonId String

  @@map("team_trophies")
}

model PlayerTrophy {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  player   Player @relation(fields: [playerId], references: [id])
  playerId String
  trophy   Trophy @relation(fields: [trophyId], references: [id])
  trophyId String
  season   Season @relation(fields: [seasonId], references: [id])
  seasonId String

  @@map("player_trophies")
}

model Trophy {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String
  description String?
  type        TrophyType

  teamTrophies   TeamTrophy[]
  playerTrophies PlayerTrophy[]

  @@map("trophy")
}

model FixtureStatus {
  id       String    @id @default(cuid())
  short    String // Например, "HT"
  long     Status    @default(NOT_STARTED)
  elapsed  Int?
  extra    String?
  fixtures Fixture[]

  @@map("status")
}

enum Role {
  HEAD_COACH
  ASSISTANT_COACH
  TEAM_MANAGER
  MEDICAL_STAFF
  MAIN_REFEREE
  ASSISTANT_REFEREE
}

enum Result {
  HOME_WIN
  AWAY_WIN
  DRAW
}

enum Status {
  NOT_STARTED
  FIRST_HALF
  HALF_TIME
  SECOND_HALF
  FINISHED
  POSTPONED
  CANCELLED
}

enum EventType {
  GOAL
  CARD
  SUBSTITUTION
  VAR
  PENALTY
}

enum CardType {
  YELLOW
  RED
  YELLOW_RED
}

enum GoalType {
  NORMAL
  PENALTY
  OWN_GOAL
}

enum Surface {
  GRASS
  TURF
  CLAY
  OTHER
}

enum LeagueType {
  DOMESTIC
  INTERNATIONAL
  FRIENDLY
}

enum TrophyType {
  LEAGUE_DOMESTIC
  LEAGUE_INTERNATIONAL
  NATIONAL_CUP
  CONTINENTAL_CUP
  WORLD_CUP
  INDIVIDUAL_PLAYER_OF_YEAR
  TOP_SCORER
  BEST_GOALKEEPER
}

enum UserRole {
  USER
  ADMIN
}
